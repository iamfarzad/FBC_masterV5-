---
description: "Missing Files & Functions Analysis via Git History"
alwaysApply: true
globs:
  - "**/*"
---



# Missing Files & Functions Analysis via Git History

**‚ö†Ô∏è CRITICAL: Always analyze git commit history before assuming files/functions are missing**

## üîç Git History Analysis Workflow

### Step 1: Check Recent Refactoring Patterns
Based on commit history analysis, this project has undergone extensive refactoring:

**Key Refactoring Events:**
- **2025-07-13**: Major AI service stabilization and API compatibility fixes
- **2025-07-08**: Complete chat functionality overhaul with Vercel AI SDK
- **2025-06-27**: AI Unification migration to UnifiedAIService Architecture
- **2025-06-20**: Multiple branch merges with component restructuring
- **2025-06-18**: Conversational state machine implementation

### Step 2: Search Commit History for Missing Items
\`\`\`bash
# Search for specific file/function mentions
git log --oneline --grep="filename" --all
git log --oneline --grep="functionName" --all

# Search for removal/refactor commits
git log --oneline --grep="remove\|delete\|refactor\|migrate" --all

# Check specific commit details
git show <commit-hash> --name-status
\`\`\`

### Step 3: Analyze Common Removal Patterns

**Frequently Removed/Refactored Components:**
- **Chat Components**: Multiple iterations (Vercel AI SDK, UnifiedAIService, etc.)
- **AI Services**: Migrated from individual services to UnifiedAIService
- **UI Components**: Design system unification and component consolidation
- **API Routes**: Restructured under modular architecture
- **Voice Features**: Consolidated into unified voice system

## üìã Missing File Analysis Checklist

### Before Creating Missing Files:
1. **Search commit history** for the exact filename/function name
2. **Check for refactoring commits** that might have moved/renamed the item
3. **Look for "revert" commits** that might have removed functionality
4. **Examine merge commits** for conflicts that might have removed files
5. **Check for architectural migrations** (e.g., UnifiedAIService migration)

### Common Removal Scenarios from History:

**üîß API Refactoring (2025-06-27)**
- Files moved from individual services to `lib/unified-ai-service.ts`
- API routes restructured under modular architecture
- Check if functionality exists in unified service

**üé® UI Component Consolidation (2025-06-19)**
- Design system unification removed duplicate components
- Components moved to shared UI library
- Check `components/ui/` directory first

**ü§ñ AI Service Migration (2025-06-27)**
- Individual AI services consolidated into UnifiedAIService
- Check `lib/unified-ai-service.ts` for missing functions
- Verify API compatibility with current Gemini SDK version

**üí¨ Chat System Overhaul (2025-07-08)**
- Multiple chat implementations replaced with Vercel AI SDK
- Check current chat implementation in `app/chat/`
- Verify against latest AI patterns and rules

## üö® Critical Historical Context

### Major Architectural Changes:
1. **UnifiedAIService Migration** (2651e01): All AI functions consolidated
2. **Vercel AI SDK Integration** (83fccf7): Chat system completely overhauled
3. **Design System Unification** (180d0a2): UI components standardized
4. **Gemini API Updates** (2350cc5): API compatibility fixes applied

### Frequently Removed Features:
- **Inline video learning**: Moved to dedicated page (529b6cd)
- **Individual voice systems**: Unified into single interface (1aad0e4)
- **Multiple chat implementations**: Consolidated into Vercel AI SDK
- **Redundant UI components**: Standardized through design system

## üîß Recovery Strategies

### If File/Function Was Removed:

1. **Check for replacement implementation**:
   \`\`\`bash
   git log --oneline --grep="replacement\|alternative\|new.*implementation" --all
   \`\`\`

2. **Look for migration commits**:
   \`\`\`bash
   git show <commit-hash> --name-status | grep -E "(R|A|M)"
   \`\`\`

3. **Check current architecture**:
   - AI functions ‚Üí `lib/unified-ai-service.ts`
   - UI components ‚Üí `components/ui/`
   - API routes ‚Üí `app/api/`
   - Chat logic ‚Üí `app/chat/`

### If File/Function Was Refactored:

1. **Search for new naming patterns**:
   \`\`\`bash
   git log --oneline --grep="rename\|refactor.*function\|move.*to" --all
   \`\`\`

2. **Check for architectural migrations**:
   - UnifiedAIService for AI functions
   - Vercel AI SDK for chat
   - Design system for UI components

## üìù Documentation Requirements

### When Recreating Missing Items:
1. **Document the reason** for recreation in commit message
2. **Reference the original removal** commit if applicable
3. **Verify compatibility** with current architecture
4. **Update CHANGELOG.md** as per project convention
5. **Follow current patterns** from existing codebase

### Commit Message Format:
\`\`\`
feat: restore [component/function] from [original-commit]

- Reason for restoration
- Compatibility with current architecture
- References original removal commit
- Updates CHANGELOG.md
\`\`\`

## ‚ö†Ô∏è Common Pitfalls to Avoid

1. **Don't recreate removed functionality** without checking why it was removed
2. **Don't ignore architectural migrations** - check current patterns first
3. **Don't assume files are missing** without git history analysis
4. **Don't recreate deprecated patterns** - follow current architecture
5. **Don't ignore compatibility issues** - verify against current dependencies

## üîó Reference Files

- [commit_history_domain_sorted.txt](mdc:commit_history_domain_sorted.txt) - Chronological commit history
- [commit_history_full.txt](mdc:commit_history_full.txt) - Complete commit details
- [CHANGELOG.md](mdc:CHANGELOG.md) - Project change documentation
- [backend_architecture.md](mdc:backend_architecture.md) - Current architecture guide
- [lib/unified-ai-service.ts](mdc:lib/unified-ai-service.ts) - Current AI service implementation

**Remember: This project has undergone extensive refactoring. Always check git history before assuming something is missing.**
