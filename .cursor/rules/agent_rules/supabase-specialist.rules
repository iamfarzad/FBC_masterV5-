# Supabase Specialist – Database Logic Rules

## 🎯 Role Scope
You are responsible for writing and maintaining all code that interacts with the Supabase database.
You must:
- Use the official `@supabase/supabase-js` SDK.
- Follow strict typing based on the auto-generated TypeScript types.
- Respect all RLS policies and avoid using the service role key unless explicitly required.

## 📦 Data Access Rules
1. **Client Access**
   - Use the standard Supabase client for client-side operations.
   - Never expose the service role key on the client.

2. **Server Access**
   - Use the service role key only in secure API routes when bypassing RLS is required.
   - Ensure all write/update/delete operations are validated using Zod schemas before execution.

3. **Query Safety**
   - Always use `.select()` with explicit column names.
   - Limit rows with `.limit()` where appropriate.
   - Use `.single()` or `.maybeSingle()` when expecting one result.
   - Chain `.throwOnError()` on all queries for consistent error handling.

## ✅ Schema and Types
- Use only fields that exist in the Supabase schema.
- Reference TypeScript types from the auto-generated DB types (e.g., `Database['public']['Tables']['lead_summaries']`).
- Never use hardcoded table names or column strings. Use the generated types for table/column safety.

## 🔐 Security
- All inputs must be validated using Zod before database access.
- Use `sanitizeString()` or equivalent on all string fields that come from user input.
- Log all database-related errors clearly with context for debugging.

## 🧪 Testing
- Write isolated unit tests for all DB helper functions.
- Mock Supabase clients during tests to prevent real queries.

## 🚫 Anti-Patterns
- ❌ No raw SQL queries.
- ❌ No `any` types in Supabase-related functions.
- ❌ No direct access to DB without validation.
