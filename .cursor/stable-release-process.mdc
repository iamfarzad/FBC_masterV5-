---
description: "Stable Release Process & Testing Requirements"
alwaysApply: true
globs:
  - "**/*"
---

# Stable Release Process & Testing Requirements

## 🚨 **MANDATORY REQUIREMENTS**

When generating changelog entries or proposing code changes, you MUST enforce these requirements:

### 1. **Automated Testing Requirement**
- **Every new feature** requires a corresponding automated test
- **Every bug fix** requires a test that reproduces the bug
- **Test coverage** must be maintained or improved
- **Integration tests** required for API changes
- **E2E tests** required for user-facing features

### 2. **Database & API Migration Requirements**
- **Migration script** required for any schema change
- **Rollback script** required for every migration
- **API versioning** required for breaking changes
- **Backward compatibility** must be maintained where possible
- **Migration testing** in staging environment required

### 3. **Branch Protection Rules**
- **Main branch locked** - no direct commits allowed
- **Feature branches required** - all work must go through named branches
- **Pull request reviews** - minimum 1 approval required
- **Status checks** - all tests must pass before merge
- **Squash merging** - clean commit history maintained

### 4. **CI/CD Pipeline Requirements**
- **Automated test suite** runs on every PR
- **Build verification** - ensure code compiles and builds
- **Linting checks** - code style and quality standards
- **Security scanning** - dependency and code vulnerability checks
- **Performance regression** - prevent performance degradation

### 5. **Integration & Testing Plans**
- **Step-by-step integration plan** required for all changes
- **Testing strategy** must be documented
- **Rollback procedures** clearly defined
- **Monitoring requirements** specified
- **Success criteria** explicitly defined

### 6. **Pull Request Guidelines**
- **One isolated change per PR** - no mixed feature sets
- **Clear description** of what and why
- **Screenshots/videos** for UI changes
- **Test instructions** for reviewers
- **Breaking change notes** prominently displayed

### 7. **Test-Driven Development**
- **Failing test first** - write test that reproduces issue
- **Red-Green-Refactor** cycle followed
- **Test coverage reports** included in PR
- **Performance benchmarks** for performance changes
- **Load testing** for high-traffic features

## 🔍 **VALIDATION CHECKLIST**

Before approving any change, verify:

- [ ] **Automated test exists** and passes
- [ ] **Migration scripts** created and tested
- [ ] **Rollback plan** documented and tested
- [ ] **Feature branch** used (not main)
- [ ] **CI pipeline** passes all checks
- [ ] **Integration plan** documented
- [ ] **Single change** per PR
- [ ] **Failing test reference** provided
- [ ] **Breaking changes** clearly marked
- [ ] **Documentation updated** accordingly

## 🚫 **REJECTION CRITERIA**

**REJECT** any proposal that:

- ❌ Lacks corresponding automated tests
- ❌ Missing migration/rollback scripts
- ❌ Attempts direct main branch commits
- ❌ Fails CI pipeline checks
- ❌ No clear integration plan
- ❌ Multiple unrelated changes
- ❌ No failing test reference
- ❌ No CI job failure reference
- ❌ Missing documentation updates
- ❌ No performance impact assessment

## 📋 **CHANGELOG REQUIREMENTS**

When updating [CHANGELOG.md](mdc:CHANGELOG.md):

- **Version bump** follows semantic versioning
- **Breaking changes** clearly marked with ⚠️
- **Migration notes** included for schema changes
- **Test coverage** mentioned for new features
- **Performance impact** documented
- **Rollback instructions** provided if needed

## 🧪 **TESTING FRAMEWORK**

Reference existing test patterns in:
- [tests/](mdc:tests/) - Unit and integration tests
- [scripts/test-*.ts](mdc:scripts/) - Automated test scripts
- [playwright.config.ts](mdc:playwright.config.ts) - E2E test configuration
- [jest.config.cjs](mdc:jest.config.cjs) - Unit test configuration

## 🔄 **RELEASE PROCESS**

1. **Feature Development** → Feature branch with tests
2. **Code Review** → PR with passing CI
3. **Integration Testing** → Staging environment validation
4. **Performance Testing** → Load and stress testing
5. **Security Review** → Vulnerability scanning
6. **Documentation** → Update docs and changelog
7. **Release** → Tagged release with migration scripts
8. **Monitoring** → Post-release performance tracking

## 📊 **QUALITY METRICS**

Track and maintain:
- **Test Coverage**: Minimum 80% for new code
- **Build Success Rate**: 99%+ CI pass rate
- **Performance**: No regression in response times
- **Security**: Zero high/critical vulnerabilities
- **Documentation**: 100% API documentation coverage
- **Migration Success**: 100% successful deployments

---

**Remember**: Quality and stability over speed. Every change must be tested, documented, and reversible.
# Stable Release Process & Testing Requirements

## 🚨 **MANDATORY REQUIREMENTS**

When generating changelog entries or proposing code changes, you MUST enforce these requirements:

### 1. **Automated Testing Requirement**
- **Every new feature** requires a corresponding automated test
- **Every bug fix** requires a test that reproduces the bug
- **Test coverage** must be maintained or improved
- **Integration tests** required for API changes
- **E2E tests** required for user-facing features

### 2. **Database & API Migration Requirements**
- **Migration script** required for any schema change
- **Rollback script** required for every migration
- **API versioning** required for breaking changes
- **Backward compatibility** must be maintained where possible
- **Migration testing** in staging environment required

### 3. **Branch Protection Rules**
- **Main branch locked** - no direct commits allowed
- **Feature branches required** - all work must go through named branches
- **Pull request reviews** - minimum 1 approval required
- **Status checks** - all tests must pass before merge
- **Squash merging** - clean commit history maintained

### 4. **CI/CD Pipeline Requirements**
- **Automated test suite** runs on every PR
- **Build verification** - ensure code compiles and builds
- **Linting checks** - code style and quality standards
- **Security scanning** - dependency and code vulnerability checks
- **Performance regression** - prevent performance degradation

### 5. **Integration & Testing Plans**
- **Step-by-step integration plan** required for all changes
- **Testing strategy** must be documented
- **Rollback procedures** clearly defined
- **Monitoring requirements** specified
- **Success criteria** explicitly defined

### 6. **Pull Request Guidelines**
- **One isolated change per PR** - no mixed feature sets
- **Clear description** of what and why
- **Screenshots/videos** for UI changes
- **Test instructions** for reviewers
- **Breaking change notes** prominently displayed

### 7. **Test-Driven Development**
- **Failing test first** - write test that reproduces issue
- **Red-Green-Refactor** cycle followed
- **Test coverage reports** included in PR
- **Performance benchmarks** for performance changes
- **Load testing** for high-traffic features

## 🔍 **VALIDATION CHECKLIST**

Before approving any change, verify:

- [ ] **Automated test exists** and passes
- [ ] **Migration scripts** created and tested
- [ ] **Rollback plan** documented and tested
- [ ] **Feature branch** used (not main)
- [ ] **CI pipeline** passes all checks
- [ ] **Integration plan** documented
- [ ] **Single change** per PR
- [ ] **Failing test reference** provided
- [ ] **Breaking changes** clearly marked
- [ ] **Documentation updated** accordingly

## 🚫 **REJECTION CRITERIA**

**REJECT** any proposal that:

- ❌ Lacks corresponding automated tests
- ❌ Missing migration/rollback scripts
- ❌ Attempts direct main branch commits
- ❌ Fails CI pipeline checks
- ❌ No clear integration plan
- ❌ Multiple unrelated changes
- ❌ No failing test reference
- ❌ No CI job failure reference
- ❌ Missing documentation updates
- ❌ No performance impact assessment

## 📋 **CHANGELOG REQUIREMENTS**

When updating [CHANGELOG.md](mdc:CHANGELOG.md):

- **Version bump** follows semantic versioning
- **Breaking changes** clearly marked with ⚠️
- **Migration notes** included for schema changes
- **Test coverage** mentioned for new features
- **Performance impact** documented
- **Rollback instructions** provided if needed

## 🧪 **TESTING FRAMEWORK**

Reference existing test patterns in:
- [tests/](mdc:tests/) - Unit and integration tests
- [scripts/test-*.ts](mdc:scripts/) - Automated test scripts
- [playwright.config.ts](mdc:playwright.config.ts) - E2E test configuration
- [jest.config.cjs](mdc:jest.config.cjs) - Unit test configuration

## 🔄 **RELEASE PROCESS**

1. **Feature Development** → Feature branch with tests
2. **Code Review** → PR with passing CI
3. **Integration Testing** → Staging environment validation
4. **Performance Testing** → Load and stress testing
5. **Security Review** → Vulnerability scanning
6. **Documentation** → Update docs and changelog
7. **Release** → Tagged release with migration scripts
8. **Monitoring** → Post-release performance tracking

## 📊 **QUALITY METRICS**

Track and maintain:
- **Test Coverage**: Minimum 80% for new code
- **Build Success Rate**: 99%+ CI pass rate
- **Performance**: No regression in response times
- **Security**: Zero high/critical vulnerabilities
- **Documentation**: 100% API documentation coverage
- **Migration Success**: 100% successful deployments

---

**Remember**: Quality and stability over speed. Every change must be tested, documented, and reversible.
