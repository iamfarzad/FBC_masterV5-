import { NextRequest } from 'next/server';
import { getSupabaseService } from "@/src/lib/supabase";
import { getSupabaseStorage } from '@/src/services/storage/supabase';
import { logServerActivity } from '@/src/core/server-activity-logger';
import { generatePdfWithPuppeteer, generatePdfPath } from '@/src/core/pdf-generator-puppeteer';
import fs from 'fs';
import { recordCapabilityUsed } from '@/src/core/context/capabilities';

export const dynamic = 'force-dynamic';

interface SummaryData {
  leadInfo: {
    name: string;
    email: string;
    company?: string;
    role?: string;
  };
  conversationHistory: Array<{
    role: 'user' | 'assistant';
    content: string;
    timestamp: string;
  }>;
  leadResearch?: {
    conversation_summary?: string;
    consultant_brief?: string;
    lead_score?: number;
    ai_capabilities_shown?: string;
  };
  sessionId: string;
}

// This function is now replaced by the PDF generator
function generateMarkdownContent(data: SummaryData): string {
  const { leadInfo, conversationHistory, leadResearch } = data;
  
  let content = `
# F.B/c AI Assistant - Conversation Summary

## Lead Information
- **Name:** ${leadInfo.name}
- **Email:** ${leadInfo.email}
${leadInfo.company ? `- **Company:** ${leadInfo.company}` : ''}
${leadInfo.role ? `- **Role:** ${leadInfo.role}` : ''}
- **Session ID:** ${data.sessionId}
- **Generated:** ${new Date().toLocaleString()}

## Lead Research Summary
${leadResearch?.conversation_summary ? `
${leadResearch.conversation_summary}
` : 'No lead research data available.'}

## Consultant Brief
${leadResearch?.consultant_brief ? `
${leadResearch.consultant_brief}
` : 'No consultant brief available.'}

## Lead Score: ${leadResearch?.lead_score || 'N/A'}/100

## AI Capabilities Identified
${leadResearch?.ai_capabilities_shown ? `
${leadResearch.ai_capabilities_shown}
` : 'No AI capabilities identified yet.'}

## Conversation History

`;

  conversationHistory.forEach((message, index) => {
    const role = message.role === 'user' ? 'ðŸ‘¤ User' : 'ðŸ¤– F.B/c AI';
    const timestamp = new Date(message.timestamp).toLocaleString();
    
    content += `
### ${role} - ${timestamp}

${message.content}

---
`;
  });

  content += `

## Key Insights & Recommendations

Based on this conversation, here are the key insights and next steps:

1. **Lead Qualification:** ${leadResearch?.lead_score && leadResearch.lead_score > 70 ? 'High-value prospect' : leadResearch?.lead_score && leadResearch.lead_score > 40 ? 'Qualified prospect' : 'Needs further qualification'}

2. **Pain Points Identified:** ${leadResearch?.conversation_summary ? 'See conversation summary above' : 'Continue discovery in next interaction'}

3. **Recommended Next Steps:**
   - Schedule follow-up consultation
   - Send personalized AI solution proposal
   - Share relevant case studies and testimonials
   - Schedule technical demonstration

4. **Follow-up Timeline:** Within 24-48 hours

---
*Generated by F.B/c AI Assistant - Lead Generation System*
`;

  return content;
}

export async function POST(req: NextRequest) {
  try {
    const { sessionId: bodySessionId, leadEmail, language = 'en' } = await req.json();
    const sessionId = bodySessionId || req.headers.get('x-intelligence-session-id');

    if (!sessionId) {
      return new Response(JSON.stringify({ error: 'Session ID required' }), {
        status: 400,
        headers: { 'Content-Type': 'application/json' }
      });
    }

    const supabase = getSupabaseService();

    // Get lead information
    let leadInfo = { name: 'Unknown', email: leadEmail || 'unknown@example.com' };
    let leadResearch = null;

    if (leadEmail) {
      const { data: leadData } = await supabase
        .from('leads')
        .select('name, email, company, role')
        .eq('email', leadEmail)
        .single();

      if (leadData) {
        leadInfo = leadData;
      }

      // Get lead research data
      const { data: researchData } = await supabase
        .from('lead_summaries')
        .select('conversation_summary, consultant_brief, lead_score, ai_capabilities_shown')
        .eq('email', leadEmail)
        .single();

      if (researchData) {
        leadResearch = researchData;
      }
    }

    // Get conversation history from activities
    const { data: activities } = await supabase
      .from('activities')
      .select('*')
      .eq('metadata->sessionId', sessionId)
      .order('created_at', { ascending: true });

    const conversationHistory = activities?.map(activity => ({
      role: (activity.type === 'ai_request' ? 'assistant' : 'user'),
      content: String(activity.description || activity.title),
      timestamp: String(activity.created_at)
    })) || [];

    const summaryData: SummaryData = {
      leadInfo,
      conversationHistory,
      leadResearch: leadResearch || undefined,
      sessionId
    };

    // Generate PDF using the PDF generator (client mode)
    const pdfPath = generatePdfPath(sessionId, leadInfo.name);
    
    try {
      await generatePdfWithPuppeteer(summaryData, pdfPath, 'internal', language);
      
      // Read the generated PDF file
      const pdfBuffer = fs.readFileSync(pdfPath);
      
      // Clean up the temporary file
      fs.unlinkSync(pdfPath);
      
      // Log the export activity
      await logServerActivity({
        type: 'export_summary',
        title: 'PDF Summary Exported',
        description: `Generated PDF summary for ${leadInfo.name}`,
        status: 'completed',
        metadata: {
          name: leadInfo.name,
          email: leadInfo.email,
          sessionId,
          format: 'pdf',
          fileSize: pdfBuffer.length
        }
      });

      // Record capability usage
      try {
        await recordCapabilityUsed(String(sessionId), 'exportPdf', { fileSize: pdfBuffer.length })
      } catch {}

      // Return the PDF as a download
      return new Response(pdfBuffer, {
        headers: {
          'Content-Type': 'application/pdf',
          'Content-Disposition': `attachment; filename="FB-c_Summary_${leadInfo.name.replace(/\s+/g, '_')}_${new Date().toISOString().split('T')[0]}.pdf"`,
          'Content-Length': pdfBuffer.length.toString()
        }
      });

    } catch (pdfError) {
    // eslint-disable-next-line no-console
    console.error('PDF generation error', pdfError)
      
      // Fallback to markdown if PDF generation fails
      const markdownContent = generateMarkdownContent(summaryData);
      
      return new Response(JSON.stringify({
        success: true,
        content: markdownContent,
        filename: `FB-c_Summary_${leadInfo.name.replace(/\s+/g, '_')}_${new Date().toISOString().split('T')[0]}.md`,
        error: 'PDF generation failed, returning markdown instead'
      }), {
        headers: {
          'Content-Type': 'application/json',
          'Content-Disposition': `attachment; filename="FB-c_Summary_${leadInfo.name.replace(/\s+/g, '_')}_${new Date().toISOString().split('T')[0]}.md"`
        }
      });
    }

  } catch (error) {
    // eslint-disable-next-line no-console
    console.error('Export summary error', error)
    return new Response(JSON.stringify({ error: 'Failed to generate summary' }), {
      status: 500,
      headers: { 'Content-Type': 'application/json' }
    });
  }
}
