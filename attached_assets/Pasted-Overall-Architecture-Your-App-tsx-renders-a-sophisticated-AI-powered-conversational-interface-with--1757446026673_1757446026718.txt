Overall Architecture

Your App.tsx renders a sophisticated AI-powered conversational interface with multiple overlapping systems. Here's the complete breakdown:

1. Main Layout Structure

```
┌─────────────────────────────────────┐
│        UnifiedControlPanel         │ ← Fixed header with controls
├─────────────────────────────────────┤
│                                     │
│         Main Chat Area              │ ← Scrollable conversation
│     (WelcomeScreen or Messages)     │
│                                     │
├─────────────────────────────────────┤
│         CleanInputField             │ ← Fixed bottom input
├─────────────────────────────────────┤
│    Overlays (when triggered)       │ ← Modal overlays
└─────────────────────────────────────┘
```

2. Component Hierarchy & Rendering

🎛️ UnifiedControlPanel (Fixed Top)
Purpose: Mission control dashboard
Renders: 
Voice mode toggle
Lead score display (percentage)
Conversation stage progress
AI capability counter
PDF generation button
Booking/Settings triggers

Key Props:
`leadScore` → Shows conversion probability
`systemState` → AI Elements system status
`currentStageIndex` → Progress through stages

💬 Main Content Area (Scrollable Center)
Purpose: Core conversation interface

Conditional Rendering:
```tsx
{state.messages.length === 0 ? 
  <WelcomeScreen /> :           // Initial state
  <MessagesList />              // Conversation in progress
}
```

WelcomeScreen: Introduction with branding  
MessagesList: Animated message threads with:
`UnifiedMessage` components for each chat bubble
`LoadingIndicator` during AI responses
Auto-scroll target (`messagesEndRef`)

⌨️ CleanInputField (Fixed Bottom)
Purpose: Multi-tool input interface
Features:
Text input with voice toggle
Tool selection (docs, webcam, screen share)
Settings access
Smart suggestions

3. State Management System

useAppState Hook
Purpose: Centralized state management
Key State Categories:

```tsx
// Core chat functionality
input: string                    // Current message
messages: MessageData[]          // Chat history
isLoading: boolean              // AI thinking state

// Multimodal features  
voiceMode: boolean              // Voice chat active
showWebcamInterface: boolean    // Video analysis
showScreenShareInterface: boolean // Screen sharing

// UI overlays
showBookingOverlay: boolean     // Calendar booking
showSettingsOverlay: boolean    // Theme/settings
showFileUpload: boolean         // Document upload

// Business logic
conversationState: {
  leadScore: number             // Conversion probability
  stage: string                 // Sales funnel stage
  showActions: boolean          // CTA visibility
}
```

useAIElementsSystem Hook
Purpose: AI capabilities tracking
Manages:
Stage progression (greeting → discovery → qualification → presentation → closing)
Capability activation (document analysis, real-time processing, etc.)
System state monitoring

4. Event Handler Functions

Core Chat Functions
```tsx
handleSendMessage()           // Process user input
handleSuggestionClick()       // Quick response selection
handleVoiceComplete()         // Voice-to-text completion
```

Multimodal Functions
```tsx
handleToolSelect(toolId)      // Activate AI tools
handleFilesUploaded()         // Document analysis
handleWidgetExpand/Close()    // Manage minimized interfaces
```

Business Functions
```tsx
handleBookingComplete()       // Calendar confirmation
handleGeneratePDF()          // Strategy report creation
```

5. Overlay System (Modal Layers)

AnimatePresence Wrappers
Each overlay uses mode="wait" for smooth transitions:

SpeechToSpeechPopover - Voice AI interface
SettingsOverlay - Theme and configuration  
FileUploadOverlay - Document upload
UnifiedCanvasSystem - Research/workshop tools
WebcamInterface - Video analysis
ScreenShareInterface - Screen sharing
CalendarBookingOverlay - Appointment booking

Z-Index Layering
Base content: z-1
Control panel: z-10  
Widgets: z-20
Overlays: z-50
Tooltips: z-60

6. Multimodal Widget System

UnifiedMultimodalWidget
Purpose: Floating minimized interface manager
Dynamic Rendering: Creates widget array based on active interfaces

```tsx
// Voice widget when minimized
if (showVoiceOverlay && isVoiceMinimized) → Voice AI widget
// Webcam widget when minimized  
if (showWebcamInterface && isWebcamMinimized) → Video Call widget
// Screen share widget when minimized
if (showScreenShareInterface && isScreenShareMinimized) → Screen Share widget
```

7. Auto-Scroll System

Smart Scrolling Logic
```tsx
messagesContainerRef     // Main scroll container
messagesEndRef          // Invisible scroll target
handleScroll()          // Detects user scrolling
scrollToBottom()        // Auto-scroll to latest
```

User Experience: 
Auto-scrolls to new messages
Detects manual scrolling
Shows "scroll to bottom" button when needed
Smooth animations with timeout management

8. AI Integration Points

Conversation Flow
Message Processing → Updates AI system state
Capability Activation → Triggers based on user actions
Stage Advancement → Progresses through sales funnel
Lead Scoring → Dynamic score updates

Business Intelligence Features
Document Analysis → PDF/file processing
Real-time Processing → Voice/video analysis  
Adaptive Learning → Conversation optimization
Source Citation → Research backing

9. Responsive Design System

Mobile-Friendly Layout
Fixed header/footer with scrollable center
Touch-optimized controls
Responsive grid systems
Glass morphism effects for premium feel

Theme System
Light Mode: Clean, professional
Dark Mode: Holographic aesthetic  
Monochrome: Monospace typography throughout

10. Performance Optimizations

React Optimizations
`React.memo` for expensive components
`useCallback` for event handlers  
`useMemo` for computed widget arrays
Conditional rendering to minimize DOM

Animation Performance
Motion/React for smooth animations
Staggered entrance animations
GPU-accelerated transforms
Reduced motion support
